const serverIp = window.location.hostname;

const serviceMessageOutput = document.getElementById("service-message-output")
const textDisplay = document.getElementById('output');
const pauseButton = document.getElementById('pause-btn');
const clearButton = document.getElementById('clear-btn');
const copyButton = document.getElementById('copy-btn');

let isPaused = false;

const toggleThemeBtn = document.getElementById('toggle-theme-btn');

let lang = '';
let socket = undefined;
let reconnectInterval;

async function connectWebSocket() {
    if (lang === "") {
        return
    }
    serviceMessageOutput.innerHTML = `Connecting to ${serverIp}......`;

    // Create a new WebSocket connection
    socket = new WebSocket(`ws://${serverIp}:8000/ws/transcribe/${lang}`);

    socket.onmessage = function (event) {
        let message = event.data;
        if (message.startsWith("Service Message:")) {
            serviceMessageOutput.innerHTML += `<p><strong>Service status:</strong> ${message.slice(17)}</p>`;
        } else {
            addText(event.data);
        }
    };

    socket.onopen = function () {
        console.log(`WebSocket connected for language: ${lang}`);
        serviceMessageOutput.innerHTML = `Connected to WebSocket for language: ${lang}`;

        // If the connection is restored, stop the reconnection checks
        clearInterval(reconnectInterval);
    };

    socket.onclose = function () {
        console.log("Disconnected from WebSocket");
        serviceMessageOutput.innerHTML = `Disconnected from WebSocket`;

        // Start checking the connection every 5 seconds
        reconnectInterval = setInterval(checkConnection, 5000);
    };

    socket.onerror = function (error) {
        console.log("WebSocket Error:", error);
        serviceMessageOutput.innerHTML = `Error: ${error}`;
    };
}

function checkConnection() {
    console.log("Checking WebSocket connection...");

    // If the WebSocket connection is closed or in the process of closing, try to reconnect
    if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
        console.log("Attempting to reconnect...");
        connectWebSocket();  // Reconnect
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–µ–º—ã –≤ localStorage
const savedTheme = localStorage.getItem('theme');
if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme);
    toggleThemeBtn.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
toggleThemeBtn.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    toggleThemeBtn.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
function addText(text) {
    if (!isPaused) {
        const newText = document.createElement('p');
        newText.textContent = text;
        textDisplay.appendChild(newText);

        // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        textDisplay.scrollTop = textDisplay.scrollHeight;

    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã
pauseButton.addEventListener('click', () => {
    isPaused = !isPaused;
    pauseButton.textContent = isPaused ? "‚ñ∂Ô∏è" : "‚èØ";
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
clearButton.addEventListener('click', () => {
    textDisplay.innerHTML = '';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
// copyButton.addEventListener('click', () => {
//     const text = Array.from(textDisplay.children)
//         .map(child => child.textContent)
//         .join('\n');
//     navigator.clipboard.writeText(text).then(() => {
//         alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
//     });
// });

async function changeLanguage(event) {
    lang = event.target.value;

        try {
            const response = await fetch("/api/addLang", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({lang: lang}) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å —è–∑—ã–∫–æ–º
            });

            if (response.ok) {

                if (socket && socket instanceof WebSocket) {
                    socket.close(1000, '–û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
                }

                await connectWebSocket();
                const result = await response.json();
                console.log(result.message);
            } else {
                const error = await response.json();
                console.log(`Error: ${error.detail}`);
            }
        } catch (error) {
            console.error("Error:", error);
        }
}

window.onload = function () {
    const languageSelect = document.getElementById("languageSelect");

    languageSelect.addEventListener("change", changeLanguage);

};
